let target = {
    INIT: 'FACET.INIT',
    INIT_WITHOUT_RESET: 'FACET.INIT_WITHOUT_RESET',
    NEW_PENDING: 'FACET.LOAD_PENDING',
    DELETE_FACET: 'FACET.DELETE_FACET',
    NEW_FINISHED: 'FACET.LOAD_FINISHED',
    LOAD_FACETS: 'FACET.LOAD_FACETS',
    // //add facet
    // ADD_FACET_PENDING:'FACET.ADD_FACET_PENDING',
    // ADD_FACET_FINISHED:'FACET.ADD_FACET_FINISHED',

    //add field
    ADD_NEW_FIELD_PENDING: 'FACET.ADD_NEW_FIELD_PENDING',
    ADD_NEW_FIELD_FINISHED: 'FACET.ADD_NEW_FIELD_FINISHED',
    EDIT_FIELD_PENDING: 'FACET.EDIT_FIELD_PENDING',
    DELETE_FIELD_PENDING: 'FACET.DELETE_FIELD_PENDING',
    SYNC_FIELD_PENDING: 'FACET.SYNC_FIELD_PENDING',

    //share
    SHARE_PENDING: 'FACET.SHARE_PENDING',
    RE_SHARE_PENDING: 'FACET.RE_SHARE_PENDING',
    SHARE_FINISHED: 'FACET.SHARE_FINISHED',
    REVOKE_SHARE: 'FACET.REVOKE_SHARE',

    //add verifier
    ADD_VERIFIER_PENDING: 'FACET.ADD_VERIFIER_PENDING',
    ADD_VERIFIER_FINISHED: 'FACET.ADD_VERIFIER_FINISHED',

    //field types
    FACET_FIELD_PLAIN_TEXT: 'FACET.FACET_FIELD_PLAIN_TEXT',
    FACET_FIELD_LINK: 'FACET.FACET_FIELD_LINK',
    FACET_ACTIVITY_AUTHORIZATION: 'FACET.FACET_ACTIVITY_AUTHORIZATION',
    FACET_ACTIVITY_VERIFICATION: 'FACET.FACET_ACTIVITY_VERIFICATION',
}
let handler = {
    get: (target, key) => {
        if (target.hasOwnProperty(key)) return target[key];
        else throw new Error(`Fired a wrong actionname: ${key}. Available Actions: ${Object.keys(target)}`);
    }
}
const proxy = new Proxy(target, handler)
export default proxy
